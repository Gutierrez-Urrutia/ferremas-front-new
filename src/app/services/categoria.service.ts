import { Injectable } from '@angular/core';
import { BehaviorSubject, Observable, of } from 'rxjs';
import { Categoria } from '../interfaces/categoria';
import { CategoriaApiService } from './categoria-api.service';
import { map, catchError } from 'rxjs/operators';

@Injectable({
  providedIn: 'root'
})
export class CategoriaService {
  private categoriasSource = new BehaviorSubject<Categoria[]>([]);
  categorias$ = this.categoriasSource.asObservable();

  constructor(private categoriaApiService: CategoriaApiService) {
    this.cargarCategoriasIniciales();
  }

  private cargarCategoriasIniciales(): void {
    console.log('üîÑ Cargando categor√≠as desde backend...');

    this.categoriaApiService.getCategorias().pipe(
      // CORRECCI√ìN: Agregar tipado expl√≠cito al map
      map((categorias: any) => categorias as Categoria[]),
      catchError((error: any) => {
        console.error('‚ùå Error cargando categor√≠as desde backend:', error);
        console.warn('‚ö†Ô∏è Usando categor√≠as por defecto');
        return of(this.obtenerCategoriasPorDefecto());
      })
    ).subscribe((categorias: Categoria[]) => {
      console.log('‚úÖ Categor√≠as cargadas:', categorias);
      this.categoriasSource.next(categorias);
    });
  }

  private obtenerCategoriasPorDefecto(): Categoria[] {
    return [
      
    ];
  }

  /**
   * Obtiene todas las categor√≠as disponibles
   */
  getCategorias(): Observable<Categoria[]> {
    return this.categorias$;
  }

  /**
   * Obtiene una categor√≠a espec√≠fica por su ID
   */
  getCategoriaPorId(id: number): Observable<Categoria | undefined> {
    return this.categorias$.pipe(
      map(categorias => categorias.find(categoria => categoria.id === id))
    );
  }

  /**
   * Obtiene una categor√≠a espec√≠fica desde el backend por su ID
   */
  getCategoriaPorIdFromBackend(id: number): Observable<Categoria | undefined> {
    return this.categoriaApiService.getCategoriaById(id).pipe(
      map((categoria: any) => categoria as Categoria),
      catchError((error: any) => {
        console.error('‚ùå Error obteniendo categor√≠a por ID desde backend:', error);
        return of(undefined);
      })
    );
  }

  /**
   * Refrescar categor√≠as desde el backend
   */
  refreshCategorias(): void {
    console.log('üîÑ Refrescando categor√≠as...');
    this.cargarCategoriasIniciales();
  }

  /**
   * Buscar categor√≠as por nombre
   */
  buscarCategorias(termino: string): Observable<Categoria[]> {
    return this.categorias$.pipe(
      map(categorias =>
        categorias.filter(categoria =>
          categoria.nombre.toLowerCase().includes(termino.toLowerCase())
        )
      )
    );
  }

  /**
   * Obtener categor√≠as actuales (sincrono)
   */
  getCategoriasActuales(): Categoria[] {
    return this.categoriasSource.value;
  }
}